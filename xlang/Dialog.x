/*** Generated by xlang extension for XStudio
Fri Dec 19:41:45 2023
  ***/

class Position {
    public String id;
    public long time;
    public String type;
    public float price;
    public float sl;
    public float tp;
    public float vl;
    public float pc;
    public float profit;
    public float margin;
    public float closeprice;
    public long closetime;
    public String symbol;
    public String comment;
    
    public ORDER_TYPE posType;
    public static Map<String, HisIndic> hisindecs = new Map<String, HisIndic>();

    public HisIndic getIndicate() {
        HisIndic pDic = hisindecs.get (id);

        if (pDic == nilptr) {
            pDic = new HisIndic();
            hisindecs.put (id, pDic);
        }

        return pDic;
    }

    public Position (JsonObject pos) {
        id = pos.getString ("id");
        time = pos.getLong ("time");
        closetime = pos.getLong ("closetime");
        type = pos.getString ("type");
        price = pos.getDouble ("price");
        margin = pos.getDouble ("margin");
        sl = pos.getDouble ("sl");
        tp = pos.getDouble ("tp");
        vl = pos.getDouble ("vl");
        pc = pos.getDouble ("pc");
        profit = pos.getDouble ("profit");

        if (pos.has ("closeprice") ) {
            closeprice = pos.getDouble ("closeprice");
        } else {
            closeprice = 0;
        }

        symbol = pos.getString ("symbol");

        if (pos.has ("comment") ) {
            comment = pos.getString ("comment");
        } else {
            comment = "";
        }

        posType = (ORDER_TYPE) pos.getInt ("ntype");
    }
};

//ORDER_TYPE 合并了POSITION_TYPE POSITION_TYPE_BUY = ORDER_TYPE_BUY， POSITION_TYPE_SELL = ORDER_TYPE_SELL
enum ORDER_TYPE {
    ORDER_TYPE_BUY = 0,
    ORDER_TYPE_SELL = 1,
    ORDER_TYPE_BUY_LIMIT = 2,
    ORDER_TYPE_SELL_LIMIT = 3,
    ORDER_TYPE_BUY_STOP = 4,
    ORDER_TYPE_SELL_STOP = 5
};

class Order {
    public String tick;
    public long time;
    public String type;
    public float price;
    public float sl;
    public float tp;
    public float vl;
    public float vc;
    public float pc;
    public String symbol;
    public String comment;
    public float psl;
    public String related;
    public ORDER_TYPE orderType;

    public Order (JsonObject pos) {
        tick = pos.getString ("tick");
        time = pos.getLong ("time");
        type = pos.getString ("type");
        price = pos.getDouble ("price");
        related = pos.getString ("related");
        sl = pos.getDouble ("sl");
        tp = pos.getDouble ("tp");
        vl = pos.getDouble ("vl");
        vc = pos.getDouble ("vc");
        pc = pos.getDouble ("pc");
        psl = pos.getDouble ("psl");
        symbol = pos.getString ("symbol");

        if (pos.has ("comment") ) {
            comment = pos.getString ("comment");
        } else {
            comment = "";
        }

        orderType = (ORDER_TYPE) pos.getInt ("ntype");
    }
};

enum ENUM_TIMEFRAMES {
    PERIOD_M1 = 1,
    PERIOD_M2 = 2,
    PERIOD_M3 = 3,
    PERIOD_M4 = 4,
    PERIOD_M5 = 5,
    PERIOD_M6 = 6,
    PERIOD_M10 = 10,
    PERIOD_M12 = 12,
    PERIOD_M15 = 15,
    PERIOD_M20 = 20,
    PERIOD_M30 = 30,
    PERIOD_H1 = 16385,
    PERIOD_H2 = 16386,
    PERIOD_H3 = 16387,
    PERIOD_H4 = 16388,
    PERIOD_H6 = 16390,
    PERIOD_H8 = 16392,
    PERIOD_H12 = 16396,
    PERIOD_D1 = 16408,
    PERIOD_W1 = 32769,
    PERIOD_MN1 = 49153
};

class Dialog : Dialog_internal {
    MT5Plugins m5p = new MT5Plugins();
    TradingView trading = nilptr;
    JsonArray allSymbols = nilptr;
    int CURRENT_FRAME_MOD = 60;
    static const  int  MODE_MT5  =  0, MODE_FIX44 = 1;
    static Dialog _instance = nilptr;
    int RUN_MODE = MODE_MT5;
    Map<String, Position> positions = new Map<String, Position>();
    Map<String, Order> orders = new Map<String, Order>();
    Map<String, TradingData> subscribelist = new Map<String, TradingData>();
    Map<String, JsonObject> symbolsList = new Map<String, JsonObject>();
    Map<String, Position> hislist = new Map<String, Position>();

    public String szAccount = nilptr;
    public static String szIndent = "Original";
    
    EASystem __easystem = nilptr;
    FMMStyleManager titlebar = new FMMStyleManager();
    ContextMenu posMenus = new ContextMenu();
    Timer _pingtimer = new Timer();
    long ping_result = 0;
    QScintilla _logcat;
    bool bStartup = false;
    bool bEcoTip = false;
    public static void UpdateTheme() {

    }

    void showLogon() {
        runOnUi (new Runnable() {
            void run() override {
                Login.showLogin (Dialog.this, m5p);

                if (Login.getResult() == false) {
                    m5p.setQuit();
                    _system_.exit (0);
                    return ;
                }
            }
        });
    }
    
    void generateIdent(){
        szIndent = szAccount + "." + RUN_MODE + "." + m5p.isPluginMode();
    }
    
    public static String UserIdent(){
        return szIndent;
    }

    MT5PluginsListener listener = new MT5PluginsListener() {
        void onNetworError (bool pluginMode) override {
            runOnUi (new Runnable() {
                void run() override {
                    if (!pluginMode) {
                        statright.setText ("网络连接已断开, 正在重新连接...");
                        statright.setStyleSheetString ("color:#ff0000;\nfont-size:11px;");
                        OutputLogcat ("Error: 网络连接已断开, 将在15秒内重试!");
                    } else {
                        statright.setText ("网络连接已断开, 正在等待重连...");
                        statright.setStyleSheetString ("color:#ff0000;\nfont-size:11px;");
                        OutputLogcat ("Error: 网络连接已断开, 正在等待MT4/5客户端重连!");
                    }

                    if (bStartup) {
                        SoundMgr.playAlarm();
                    } else {
                        bStartup = true;
                    }
                }
            });
        }

        void onNetworReset (bool pluginMode) override {
            runOnUi (new Runnable() {
                void run() override {
                    if (!pluginMode) {
                        OutputLogcat ("Caution: 网络已重新连接, 令牌失效,需要重新登录!");
                        XTMessageBox.MessageBoxYesNo (Dialog.this,
                                                      "注意",
                                                      "连接已中断, 请重新登录",
                                                      "好",
                                                      nilptr,
                                                      nilptr,
                                                      nilptr,
                                                      0,
                                                      false);
                        showLogon();
                    } else {
                        statright.setText ("网络连接已重连");
                        statright.setStyleSheetString ("color:#00ff00;\nfont-size:11px;");
                        OutputLogcat ("网络连接已重连!");
                    }
                }
            });

        }

        void onData (JsonObject obj) override {
            int cmd = obj.getInt ("cmd");

            switch (cmd) {
            case TradingData.CMD_PING:
                ping_result = (_system_.currentTimeMillis() - obj.getLong ("timestamp") ) / 2;
                runOnUi (new Runnable() {
                    void run() override{
                        statright.setText ("网络:" + ping_result + " ms ");
                        statright.setStyleSheetString ("color:#00ff00;\nfont-size:11px;");
                    }
                });
                break;

            case TradingData.CMD_TICK: {
                JsonArray items = obj.getArray ("items");

                if (items != nilptr) {

                    runOnUi (new Runnable() {
                        void run() override{
                            for (int i : items.length()) {
                                JsonObject item = items.getObject (i);
                                String name = item.getString ("symbol");
                                TradingData td = subscribelist.get (name);
                                JsonObject symbolObject = nilptr;

                                synchronized (symbolsList) {
                                    symbolObject = symbolsList.get (name);
                                }

                                if (symbolObject != nilptr) {
                                    synchronized (symbolObject) {
                                        while (symbolObject.has ("lastTick") ) {
                                            symbolObject.remove ("lastTick");
                                        }

                                        symbolObject.put ("lastTick", item);
                                    }
                                }

                                if (td != nilptr) {
                                    double ask = item.getDouble ("ask"), bid = item.getDouble ("bid");
                                    td.addTick (ask, bid, item.getDouble ("volume_real"), item.getLong ("time") );

                                    long hitem = td.handler;

                                    if (hitem != 0) {
                                        bool rise = Math.parseDouble (symbollist.getItemText (hitem, 1) ) < ask;
                                        int dig = td.getDigits();
                                        String fmt = td.getPriceFormater();
                                        symbollist.setItemData (hitem, 1, String.format (fmt, ask) );
                                        symbollist.setItemData (hitem, 2, String.format (fmt, ask) );
                                        symbollist.setItemData (hitem, 3, (ask - bid) * Math.pow (10, dig) );
                                        symbollist.setItemData (hitem, 4, (int) (td.mobility() ) );

                                        if (rise) {
                                            symbollist.setItemColor (hitem, 1, 0xff2962FF);
                                            symbollist.setItemColor (hitem, 2, 0xff2962FF);
                                        } else {
                                            symbollist.setItemColor (hitem, 1, 0xffF23645);
                                            symbollist.setItemColor (hitem, 2, 0xffF23645);
                                        }
                                    }
                                }
                            }

                            trading.updateTime();

                            if (__easystem != nilptr) {
                                __easystem.sendEvent (TICK_UPDATED, nilptr);
                            }
                        }
                    });
                }
            }
            break;

            case TradingData.CMD_LOGRESULT:
                if (Login.instance != nilptr) {
                    Login.instance.runOnUi (new Runnable() {
                        void run() override{
                            String name = obj.getString ("res");
                            Login.setResult (name);
                        }
                    });
                }

                break;

            case TradingData.CMD_ACCOUNT:
                runOnUi (new Runnable() {
                    void run() override{
                        double balance = obj.getDouble ("balance");
                        double netvalue = obj.getDouble ("netvalue");
                        double margin = obj.getDouble ("margin");

                        String name = obj.getString ("name");
                        int lever = obj.getInt ("lever");
                        
                        szAccount = name;
                        generateIdent();
                        //accountinfo.setColumns (new String[]{"用户名", "余额", "净值", "杠杆", "已用保证金", "保证金比例"});
                        long item = 0;

                        if (accountinfo.getTopLevelCount() == 0) {
                            item = accountinfo.addItem (nilptr, name);
                        } else {
                            item = accountinfo.getTopItem (0);
                        }

                        if (item != 0) {
                            accountinfo.setItemText (item, 1, String.format ("%.2f", balance) );
                            accountinfo.setItemText (item, 2, String.format ("%.2f", netvalue) );
                            accountinfo.setItemText (item, 3, "" + lever);
                            accountinfo.setItemText (item, 4, String.format ("%.2f", margin) );

                            if (netvalue != 0 && margin != 0) {
                                accountinfo.setItemText (item, 5, String.format ("%.2f%",  (netvalue - margin) / margin * 100.f ) );
                            } else {
                                accountinfo.setItemText (item, 5, "0");
                            }
                        }

                        setWindowTitle ("XTrader - " + name);
                    }
                });
                break;

            case TradingData.CMD_SYMBOLS: {
                JsonArray items = obj.getArray ("items");

                if (items != nilptr) {
                    runOnUi (new Runnable() {
                        void run() override{
                            allSymbols = items;
                            
                            Vector<String> combitem = new Vector<String>();

                            synchronized (symbolsList) {
                                symbolsList.clear();
                                String scribes = Preference.getString ("scribes");
                                for (int i : items.length()) {
                                    JsonObject item = items.getObject (i);

                                    if (item != nilptr) {
                                        String name = item.getString ("name");
                                        // 说明是需要订阅的
                                        combitem.add (name);
                                        symbolsList.put (name, item);
                                        
                                        bool needScribe = false;
                                        if (TextUtils.isEmpty(scribes) || scribes.indexOf ("[" + name + "]") != -1){
                                            needScribe = true;
                                        }
                                        
                                        if (needScribe){
                                            int tradeallowed = 0;
                                            if (item.has ("tradeallowed") ) {
                                                tradeallowed = item.getInt("tradeallowed");
                                            }
                                            
                                            var scribeIter = subscribelist.find(name);
                                            TradingData td = nilptr;
                                            long sitem = 0;
                                            if (scribeIter != nilptr){ // 如果已经订阅
                                                td = scribeIter.getValue();
                                                sitem = td.handler;
                                            }else{ // 还没有订阅
                                                sitem = symbollist.addItem (nilptr, name);
                                                symbollist.setItemText (sitem, 1, "-");
                                                symbollist.setItemText (sitem, 2, "-");
                                                td = new TradingData (m5p.getExecuter(), name, name, sitem, item);
                                                subscribelist.put (name,td);
                                            }
                                            
                                            if (tradeallowed == 0) {
                                                symbollist.setItemText (sitem, 4, "[非交易时段]");
                                            }else
                                            if (tradeallowed == 1 || tradeallowed == 2) {
                                                symbollist.setItemText (sitem, 4, "[交易受限]");
                                            }else
                                            if (tradeallowed == 4){
                                                symbollist.setItemText (sitem, 4, "0");
                                            }
                                        }
                                    }
                                }
                            }
                            
                            comboBox.clear();
                            comboBox.addItems (combitem.toArray (new String[0]) );
                            combitem.insert (0, "仅勾选的");
                            combitem.insert (0, "全部");
                            combitem.insert (0, "--");
                            
                            cmbSym.clear();
                            cmbSym.addItems (combitem.toArray (new String[0]) );
                        }
                    });
                }
            }
            break;

            case TradingData.CMD_BARS: {
                _system_.gc();
                JsonArray items = obj.getArray ("items");

                if (items == nilptr) {
                    return;
                }

                runOnUi (new Runnable() {
                    void run() override{
                        String symbol = obj.getString ("symbol");
                        TradingData td = subscribelist.get (symbol);

                        if (td != nilptr) {
                            td.reset (TradingData.getTimeFrame ( (ENUM_TIMEFRAMES) obj.getInt ("frame") ) );
                            double hest = -4294967390l, lest = 4294967390l;

                            for (int i = 0, c = items.length(); i < c; i++) {
                                JsonObject item = items.getObject (i);

                                double cc = item.getDouble ("close");

                                if (i + 160 > c) {
                                    hest = Math.max (hest, cc);
                                    lest = Math.min (lest, cc);
                                }

                                td.addBar (item.getDouble ("high"), item.getDouble ("low"), item.getDouble ("open"), cc, item.getDouble ("vol"), item.getLong ("time") );
                            }

                            td.setRecommandHeight (hest - lest);
                            td.locateToCurrent (true);
                            td.refresh();
                        }
                    }
                });
            }
            break;

            case TradingData.CMD_POSITION:
                JsonArray items = obj.getArray ("items");

                if (items != nilptr) {
                    runOnUi (new Runnable() {
                        void run() override{
                            updatePosition (items);
                        }
                    });
                }

                break;

            case TradingData.CMD_HISTORY:
                JsonArray items = obj.getArray ("items");

                if (items != nilptr) {
                    runOnUi (new Runnable() {
                        void run() override{
                            updateHistory (items);
                        }
                    });
                }

                break;

            case TradingData.CMD_ORDERS:
                JsonArray items = obj.getArray ("items");

                if (items != nilptr) {
                    runOnUi (new Runnable() {
                        void run() override{
                            updateOrders (items);
                        }
                    });
                }

                break;

            case TradingData.CMD_UPDATEORDER:
                int transtype = obj.getInt ("transtype");

                if (transtype == 0) { // 说明添加了持仓

                    runOnUi (new Runnable() {
                        void run() override{
                            Order ord = new Order (obj) ;
                            addOrder (ord);
                            SoundMgr.placeholdsucc();
                            OutputLogcat ("已添加挂单:" + obj.getString ("tick") );
                            __easystem.sendEvent (ORDER_CREATED, new IOrder (ord, m5p.getExecuter() ) );
                        }
                    });
                } else if (transtype == 2) { // 说明删除持仓

                    runOnUi (new Runnable() {
                        void run() override{
                            String tick = obj.getString ("tick");
                            Order ord = removeOrder (tick);
                            SoundMgr.cancelOk();
                            OutputLogcat ("已删除挂单:" + tick);
                            __easystem.sendEvent (ORDER_CLOSED, new IOrder (ord, m5p.getExecuter() ) );
                        }
                    });
                }

                break;

            case TradingData.CMD_UPDATEPOSITION:
                int transtype = obj.getInt ("transtype");

                if (transtype == 6) { // 说明添加了持仓
                    int entry = obj.getInt ("entry");
                    int deltype = obj.getInt ("deltype");

                    if (entry == 0) { // 入场
                        if (deltype == 0 || deltype == 1) {
                            Position posi = new Position (obj);
                            runOnUi (new Runnable() {
                                void run() override{
                                    addPosition (posi);
                                    SoundMgr.tradsucc();
                                    OutputLogcat ("开仓通知: 订单" + obj.getString ("id") + "已成交");
                                    __easystem.sendEvent (POSITION_CREATED, new IPosition (posi, m5p.getExecuter() ) );
                                }
                            });
                        }
                    } else { //出厂
                        if (deltype == 0 || deltype == 1) { // 卖出平仓
                            runOnUi (new Runnable() {
                                void run() override{
                                    Position posi = removePosition (obj.getString ("id") );
                                    SoundMgr.closeOk();
                                    OutputLogcat ("平仓通知: 订单" + obj.getString ("id") + "已成交");
                                    __easystem.sendEvent (POSITION_CLOSED, new IPosition (posi, m5p.getExecuter() ) );
                                }
                            });
                        }
                    }
                }

                break;

            case TradingData.CMD_REPLY:
                int errcode = obj.getInt ("code");

                if (errcode != 0) {
                    runOnUi (new Runnable() {
                        void run() override{
                            SoundMgr.fail();
                            String descrption = obj.getString ("descr");
                            OutputLogcat ("Error: 服务器返回了一个错误:" + descrption);
                            QMessageBox.Critical ("注意", "执行失败! 错误代码:" + errcode + ",信息:" + descrption, QMessageBox.Ok, QMessageBox.Ok);
                        }
                    });
                } else {
                    runOnUi (new Runnable() {
                        void run() override{
                            SoundMgr.placeholdsucc();
                        }
                    });
                }

                break;
            }
        }
    };


    class PositionListener : public onEventListener {
        float price = 0;
        public void setPrice (float p) {
            price = p;
        }
        void onTrigger (QObject obj) override {
            if (obj == posMenus.actions[0]) { //平仓
                long item = poslist.getSelItem();

                if (item != 0) {
                    String posid = poslist.getItemText (item, 0);

                    if (posid != nilptr) {
                        m5p.getExecuter().close (nilptr, CMD_ORDER_CLOSE, 0, posid);
                    }
                }

                return;
            }

            if (obj == posMenus.actions[1]) {//平仓并反向建仓
                long item = poslist.getSelItem();

                if (item != 0) {
                    String posid = poslist.getItemText (item, 0);

                    synchronized (positions) {
                        Position p = positions.get (posid);

                        if (p != nilptr) {
                            m5p.getExecuter().close (nilptr, CMD_ORDER_CLOSE, 0, posid);
                            m5p.getExecuter().createOrder (nilptr, 0, p.symbol, (p.posType == ORDER_TYPE.ORDER_TYPE_BUY) ? CMD_ORDER_MARKETS_SELL : CMD_ORDER_MARKETS_BUY, 0, 0, 0, p.vl);
                        }
                    }
                }

                return;
            }

            if (obj == posMenus.actions[2]) {
                long [] items = poslist.getTopItems();

                for (long item : items) {
                    if (poslist.isItemCheck (item, 0) == false) {
                        continue;
                    }

                    String posid = poslist.getItemText (item, 0);

                    synchronized (positions) {
                        Position p = positions.get (posid);

                        if (p != nilptr) {
                            m5p.getExecuter().close (nilptr, CMD_ORDER_CLOSE, 0, posid);
                        }
                    }
                }
            }

            if (obj == posMenus.actions[3]) {//全部平仓
                synchronized (positions) {
                    var iter = positions.iterator();

                    while (iter.hasNext() ) {
                        Position p = iter.getValue();

                        if (p != nilptr) {
                            m5p.getExecuter().close (nilptr, CMD_ORDER_CLOSE, 0, p.id);
                        }

                        iter.next();
                    }
                }

                return;
            }
        }
    };

    class TREvent : public onEventListener {
        float price = 0;
        public void setPrice (float p) {
            price = p;
        }
        void onTrigger (QObject obj) override {
            if (obj == mainMenu.actions[0]) {
                long item = symbollist.getSelItem();

                if (item == 0) {
                    return;
                }

                var iter = subscribelist.iterator();

                while (iter.hasNext() ) {
                    if (iter.getValue().handler == item) {
                        if (iter.getValue().size() < 300) {
                            m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, iter.getKey(), "5");
                        }

                        trading.reset();
                        trading.setup (iter.getValue() );
                        resetAllAction (obj);
                        break;
                    }

                    iter.next();
                }

                return;
            }

            if (obj == mainMenu.actions[1]) {
                long item = symbollist.getSelItem();

                if (item == 0) {
                    return;
                }

                String symbolName = symbollist.getItemText (item, 0);
                var td = subscribelist.get (symbolName);
                subscribelist.remove (symbolName);
                symbollist.removeItem (item);
                Preference.setSetting ("scribes", Preference.getString ("scribes").replace ("[" + symbolName + "]", "") );

                if (td != nilptr) {
                    td.clear();
                }

                return;
            }

            if (obj == mainMenu.actions[2]) {
                var iter = subscribelist.iterator();

                while (iter.hasNext() ) {
                    iter.getValue().clear();
                    iter.next();
                }

                subscribelist.clear();
                symbollist.clear();
                Preference.setSetting ("scribes", "");
                return;
            }
        }
    };

    TREvent _mevent = new TREvent();
    PositionListener posEvent = new PositionListener();

    void createContextMenu (QWidget window) {
        mainMenu.create (window, new String [] {"显示图表",  "取消订阅", "全部取消"}, _mevent, nilptr, 0);
        mainMenu.enableAll (true);
    }

    ContextMenu mainMenu = new ContextMenu();

    public static Dialog getInstance() {
        return _instance;
    }

    /** 窗口初始化 */
    bool onInitializ() override {
        _instance = this;
        setWindowFlags (WindowFlags() | (int) WindowType.WindowMinMaxButtonsHint);
        byte [] icon_data = __xPackageResource("ico.ico");
        setWindowIcon(new QIcon(icon_data, 0, icon_data.length));
        trading = attachByName ("chatwidget");
        titlebar.configure (this, FMMStyleManager.Theme.Auto);
        setFocus();
        poslist.setColumns (new String[]{"订单号",  "品种", "开仓时间", "类型", "开仓价格", "保证金", "止损", "止盈", "交易量", "当前价格", "盈亏", "备注"});
        orderlist.setColumns (new String[]{"单号",  "品种", "开仓时间", "类型", "挂单价格", "止损", "止盈", "初始仓量", "未成交仓量", "当前价格", "价格距离", "备注"});
        symbollist.setColumns (new String[]{"品种", "买价", "卖价", "点差", "流动性"});
        accountinfo.setColumns (new String[]{"用户名", "余额", "净值", "杠杆", "已用保证金", "保证金比例"});
        hispos.setColumns (new String[]{"订单号",  "品种", "开仓时间", "类型", "开仓价格", "保证金", "止损", "止盈", "交易量", "平仓价", "平仓时间", "盈亏", "备注"});
        kstree.setColumns (new String[]{"品种",  "形态", "周期", "可靠度"});
        kstree.setColumnsWidth(new int[]{140, 80, 50});
        symbollist.sortItems (4, SortOrder.DescendingOrder);
        symbollist.setColumnsWidth (new int []{60, 60, 60, 40});
        contentWidget.setStretchFactor (0, 10);
        contentWidget.setStretchFactor (1, 0);
        
        
        horizontalSplitter_2.setStretchFactor (1, 0);
        horizontalSplitter_2.setStretchFactor (1, 10);
        
        
        horizontalSplitter.setStretchFactor (0, 1);
        horizontalSplitter.setStretchFactor (10, 1);
        
  
        int d_rw = Preference.getInt("d_rw", -1);
        int d_bw = Preference.getInt("d_bw", -1);
        
        if (d_rw == 0){
            contentWidget.setSizes(new int [] {100, d_rw});
        }
        if (d_bw == 0){
            horizontalSplitter.setSizes(new int [] {100, d_bw});
        }

        newmsg.setMinimumSize (8, 8);
        createLogcatWnd();
        dateTimeEdit_3.setDateTime (_system_.currentTimeMillis() );
        eclist.setColumns (new String[]{"时间", "事件", "货币", "影响力", "预测值", "今值", "前值", "说明"});
        eclist.setColumnsWidth(new int[]{170, 300, 50, 50, 50, 50, 50});
        createContextMenu (symbollist);
        cmbSym.addItems (new String[]{"全部"});
        cmbDir.addItems (new String[]{"全部", "多单", "空单"});
        cmbInflev.addItems (new String[]{"全部", ">=低影响力", ">=中影响力", ">=高影响力"});
        cmbProfit.addItems (new String[]{"全部", "盈利", "亏损"});
        posMenus.create (poslist, new String [] {"平仓", "平仓并反向市价建仓", "平仓已勾选", "全部平仓"}, posEvent, nilptr, 0);
        posMenus.enableAll (true);
        m5p.configureListener (listener);
        loadIndicators();
        
        Login.showLogin (Dialog.this, m5p);
        __easystem = new EASystem (m5p.getExecuter(), positions, orders, subscribelist, symbolsList, hislist);

        if (Login.getResult() == false) {
            m5p.setQuit();
            _system_.exit (0);
            return false;
        }

        edFilter.setOnEditEventListener (new onEditEventListener() {
            void onTextChanged (QObject, @NotNilptr  String text) override {
                filterItems (text);
            }
        });
        Reconfig();

        
        _pingtimer.schedule (new TimerTask() {
            int time = 0;
            void run() override {
                runOnUi (new Runnable() {
                    void run() override{
                        updateAllViews();
                        if (time++ >= 5){
                            if (m5p.isPluginMode() == false) {
                                m5p.ping();
                            }
                            scanEco();
                            time = 0;
                        }
                    }
                });
            }
        }, 1000, -1);
        

        
        updateECO();
        updateKST();
        return true;
    }
    
    public void updateAllViews(){
        var iter = subscribelist.iterator();
        while (iter.hasNext() ) {
            iter.getValue().updateView();
            iter.next();
        }
    }

    public void loadIndicators() {
        File fp = new File (_system_.getAppDirectory().appendPath ("indicators") );
        int failedCnt = 0;
        String failedStr = "";
        long hfind = fp.open();

        if (hfind != 0) {
            File pfile = new File();

            while (fp.find (hfind, pfile) ) {
                try {
                    if (pfile.isDirectory() == false) {
                        _system_.loadLibrary (pfile.getPath() );
                    }
                } catch (Exception e) {
                    failedStr = failedStr + "加载指标失败:\n\t" + pfile.getPath() + " \t\n\t[Exception Message:" + e.getMessage() + "]\n";
                    OutputLogcat ( "初始化扩展失败:" + pfile.getPath() + " \t[Exception Message:" + e.getMessage() + "]\n");
                    failedCnt++;
                }
            }

            fp.close (hfind);
        }
    }

    void filterItems (String text) {
        long [] items = symbollist.getTopItems();

        if (items != nilptr) {
            if (TextUtils.isEmpty (text) ) {
                for (long h : items) {
                    symbollist.setItemVisible (h, true);
                }
            } else {
                for (long h : items) {
                    symbollist.setItemVisible (h, symbollist.getItemText (h, 0).indexOfIgnoreCase (text) != -1);
                }
            }
        }
    }

    void createLogcatWnd() {
        _logcat = new QScintilla();
        _logcat.create (tab);
        tab_7.getLayout().addWidget (_logcat);
        themeLogcat();
        _logcat.show();
    }

    void themeLogcat() {
        String szKeywords = "Alarm Position Order Warning Error Notify Caution" ;

        _logcat.sendEditor (QScintilla.SCI_CLEARDOCUMENTSTYLE, 0, 0);
        _logcat.sendEditor (QScintilla.SCI_SETLEXER, QScintilla.SCLEX_CPP, 0);
        _logcat.sendEditor (QScintilla.SCI_SETCODEPAGE, QScintilla.SC_CP_UTF8);

        for (int i = 0; i < 8; i++) {
            _logcat.sendEditor (QScintilla.SCI_SETMARGINWIDTHN, i, 0);
        }

        if (Setting.isDarkTheme() ) {
            _logcat.sendEditor (QScintilla.SCI_STYLESETBACK, QScintilla.STYLE_DEFAULT, 0xff222827);
            _logcat.sendEditor (QScintilla.SCI_STYLESETFORE, QScintilla.STYLE_DEFAULT, 0xffefefef);
            _logcat.sendEditor (QScintilla.SCI_STYLESETFORE, 75, 0xffefefef);
        } else {
            _logcat.sendEditor (QScintilla.SCI_STYLESETBACK, QScintilla.STYLE_DEFAULT, 0xffffffff);
            _logcat.sendEditor (QScintilla.SCI_STYLESETFORE, QScintilla.STYLE_DEFAULT, 0xff222827);
            _logcat.sendEditor (QScintilla.SCI_STYLESETFORE, 75, 0xff222827);
        }


        _logcat.sendEditor (QScintilla.SCI_STYLESETFONT, QScintilla.STYLE_DEFAULT, SystemSetting.getUIFont() );
        _logcat.sendEditor (QScintilla.SCI_STYLECLEARALL, 0, 0);
        _logcat.sendEditor (QScintilla.SCI_SETFONTQUALITY, QScintilla.SC_EFF_QUALITY_ANTIALIASED, 0);
        _logcat.sendEditor (QScintilla.SCI_SETKEYWORDS, 0, szKeywords); //设置关键字
        _logcat.sendEditor (QScintilla.SCI_STYLESETFORE, QScintilla.SCE_C_WORD, 0xff0000ff);
    }

    bool updatePositionItem (Position pos) {
        long [] items = poslist.getTopItems();
        String sformat = getSymbolPriceFormat (pos.symbol);
        bool bDeleted = false;

        for (long h : items) {
            String tagid = poslist.getItemText (h, 0);

            if (tagid == pos.id) {
                poslist.setItemData (h, 5, String.format ("%.2f", pos.margin) );
                poslist.setItemData (h, 6, String.format (sformat, pos.sl) );
                poslist.setItemData (h, 7, String.format (sformat, pos.tp) );
                poslist.setItemData (h, 9, String.format (sformat, pos.pc) );
                poslist.setItemText (h, 10, String.format ("%.2f", pos.profit) );
                return true;
            }

            synchronized (positions) {
                if (positions.containsKey (tagid) == false) {
                    poslist.removeItem (h);
                    bDeleted = true;
                }
            }
        }

        if (bDeleted && poslist.getTopLevelCount() == 0) {
            lblstate.setText ("");
        }

        return false;
    }

    void addPosition (Position pos) {
        synchronized (positions) {
            positions.put (pos.id, pos);
        }

        String sformat = getSymbolPriceFormat (pos.symbol);

        if (updatePositionItem (pos) == false) {
            long item = poslist.addItem (nilptr, new String[] {pos.id,
                                         pos.symbol,
                                         String.formatDate ("%Y-%m-%d %H:%M:%S", pos.time * 1000),
                                         "" + pos.type,
                                         "" + String.format (sformat, pos.price),
                                         "" + String.format ("%.2f", pos.margin),
                                         "" + String.format (sformat, pos.sl),
                                         "" + String.format (sformat, pos.tp),
                                         "" + pos.vl,
                                         "" + String.format (sformat, pos.pc),
                                         "" + String.format ("%.2f", pos.profit),
                                         pos.comment
                                                              });
            poslist.setItemCheck (item, 0, false);
        }

        TradingData _tdt =  subscribelist.get (pos.symbol);

        if (_tdt != nilptr) {
            _tdt.updatePosition (pos);
            trading.postUpdate();
        }
    }

    void addOrder (Order order) {
        synchronized (orders) {
            orders.put (order.tick, order);
        }

        String sformat = getSymbolPriceFormat (order.symbol);

        if (updateOrderItem (order) == false) {
            orderlist.addItem (nilptr, new String[] {order.tick,
                                           order.symbol,
                                           String.formatDate ("%Y-%m-%d %H:%M:%S", order.time * 1000),
                                           "" + order.type,
                                           "" + String.format (sformat, order.price),
                                           "" + String.format (sformat, order.sl),
                                           "" + String.format (sformat, order.tp),
                                           "" + order.vl,
                                           "" + order.vc,
                                           "" + String.format (sformat, order.pc),
                                           "" + order.psl,
                                           order.comment
                                                                });
        }

        TradingData _tdt =  subscribelist.get (order.symbol);

        if (_tdt != nilptr) {
            _tdt.updateOrder (order);
            trading.postUpdate();
        }
    }

    Position removePosition (String tick) {
        Position pos = nilptr;

        synchronized (positions) {
            pos = positions.get (tick);
            positions.remove (tick);
        }

        long [] items = poslist.getTopItems();

        for (long h : items) {
            if (poslist.getItemText (h, 0) == tick) {
                poslist.removeItem (h);
                break;
            }
        }

        if (pos != nilptr) {
            TradingData _tdt =  subscribelist.get (pos.symbol);

            if (_tdt != nilptr) {
                _tdt.removePosition (tick);
                trading.postUpdate();
            }
        }

        if (poslist.getTopLevelCount() == 0) {
            lblstate.setText ("");
        }

        return pos;
    }

    Order removeOrder (String id) {
        Order ord = nilptr;

        synchronized (orders) {
            ord = orders.get (id);
            orders.remove (id);
        }

        long [] items = orderlist.getTopItems();

        for (long h : items) {
            if ( orderlist.getItemText (h, 0) == id) {
                orderlist.removeItem (h);
                break;
            }
        }

        if (ord != nilptr) {
            TradingData _tdt =  subscribelist.get (ord.symbol);

            if (_tdt != nilptr) {
                _tdt.removeOrder (id);
                trading.postUpdate();
            }
        }

        return ord;
    }

    String getSymbolPriceFormat (String str) {
        JsonObject item = nilptr;

        synchronized (symbolsList) {
            item = symbolsList.get (str);
        }

        if (item != nilptr) {
            return "%." + item.getInt ("digits") + "f";
        }

        return "%.2f";
    }

    void updatePosition (JsonArray items) {
        float total = 0;
        bool bNeedUpdate = false;

        for (int i : items.length()) {
            JsonObject jitem = items.getObject (i);
            Position pos = new Position (jitem) ;

            synchronized (positions) {
                positions.put (jitem.getString ("id"), pos);
            }

            total += pos.profit;

            if (!updatePositionItem (pos) ) {
                String sformat = getSymbolPriceFormat (pos.symbol);
                long item = poslist.addItem (nilptr, new String[] {pos.id,
                                             pos.symbol,
                                             String.formatDate ("%Y-%m-%d %H:%M:%S", pos.time * 1000),
                                             "" + pos.type,
                                             "" + String.format (sformat, pos.price),
                                             "" + String.format (sformat, pos.margin),
                                             "" + String.format (sformat, pos.sl),
                                             "" + String.format (sformat, pos.tp),
                                             "" + pos.vl,
                                             "" + pos.pc,
                                             "" + String.format ("%.2f", pos.profit),
                                             pos.comment
                                                                  });
                poslist.setItemCheck (item, 0, false);
            }

            TradingData _tdt =  subscribelist.get (pos.symbol);

            if (_tdt != nilptr) {
                _tdt.updatePosition (pos);
                bNeedUpdate = true;
            }
        }

        if (bNeedUpdate) {
            trading.postUpdate();
        }

        lblstate.setText ("总盈亏:" + String.format ("%.2f", total) + "");
    }

    void updateHistory (JsonArray items) {
        float total = 0;

        hispos.clear();

        synchronized (hislist) {
            hislist.clear();

            for (int i : items.length()) {
                JsonObject jitem = items.getObject (i);
                Position pos = new Position (jitem) ;
                total += pos.profit;
                hislist.put (pos.id, pos);
                String sformat = getSymbolPriceFormat (pos.symbol);
                long item = hispos.addItem (nilptr, new String[] {pos.id,
                                            pos.symbol,
                                            String.formatDate ("%Y-%m-%d %H:%M:%S", pos.time * 1000),
                                            "" + pos.type,
                                            "" + String.format (sformat, pos.price),
                                            "" + String.format (sformat, pos.margin),
                                            "" + String.format (sformat, pos.sl),
                                            "" + String.format (sformat, pos.tp),
                                            "" + pos.vl,
                                            "" + String.format (sformat, pos.closeprice),
                                            String.formatDate ("%Y-%m-%d %H:%M:%S", pos.closetime * 1000),
                                            "" + String.format ("%.2f", pos.profit),
                                            pos.comment
                                                                 });

                if (pos.profit > 0) {
                    hispos.setItemColor (item, 11, 0xff00984B);
                } else {
                    hispos.setItemColor (item, 11, 0xffEA1B25);
                }
            }
        }

        totalprofit.setText ("已实现盈利:" + String.format ("%.2f", total) );
    }

    bool updateOrderItem (Order order) {
        long [] items = orderlist.getTopItems();

        for (long h : items) {
            String tagid =  orderlist.getItemText (h, 0) ;

            if ( tagid == order.tick) {
                orderlist.setItemData (h, 5, order.sl);
                orderlist.setItemData (h, 6, order.tp);
                orderlist.setItemData (h, 9, order.pc);
                orderlist.setItemData (h, 10, order.psl);
                return true;
            }

            synchronized (orders) {
                if (orders.containsKey (tagid) == false) {
                    orderlist.removeItem (h);
                }
            }
        }

        return false;
    }


    void updateOrders (JsonArray items) {
        bool bNeedUpdate = false;

        for (int i : items.length()) {
            JsonObject jitem = items.getObject (i);
            Order order = new Order (jitem);

            synchronized (orders) {
                orders.put (order.tick,  order);
            }

            if (updateOrderItem (order) == false) {
                orderlist.addItem (nilptr, new String[] { order.tick,
                                               order.symbol,
                                               String.formatDate ("%Y-%m-%d %H:%M:%S", order.time * 1000),
                                               "" + order.type,
                                               "" + order.price,
                                               "" + order.sl,
                                               "" + order.tp,
                                               "" + order.vl,
                                               "" + order.vc,
                                               "" + order.pc,
                                               "" + order.psl,
                                               order.comment == nilptr ? "" : order.comment
                                                                    });
            }

            TradingData _tdt =  subscribelist.get (order.symbol);

            if (_tdt != nilptr) {
                _tdt.updateOrder (order);
                bNeedUpdate = true;
            }
        }

        if (bNeedUpdate) {
            trading.postUpdate();
        }
    }


    protected bool on_this_KeyPress (QObject obj, int key, bool repeat, int count, String text, int scanCode, int virtualKey, int modifier) override {
        if (modifier == Constant.NoModifier && key == Constant.Key_Escape) {
            return false;
        }

        return true;
    }



    protected void on_pushButton_4_Click (QObject obj, bool checked) override {
        if (allSymbols == nilptr) {
            return;
        }

        String text = comboBox.getCurrentText();

        for (int i : allSymbols.length()) {
            JsonObject item = allSymbols.getObject (i);

            if (item.getString ("name") == text) {
                String symbol = item.getString ("name");

                if (subscribelist.containsKey (symbol) == false) {
                    if (RUN_MODE == MODE_MT5 ) { //FIX44专用
                        long sitem = symbollist.addItem (nilptr, text);
                        subscribelist.put (symbol, new TradingData (m5p.getExecuter(), text, symbol, sitem, item) );
                        Preference.setSetting ("scribes", Preference.getString ("scribes") + "[" + symbol + "]");
                        symbollist.setItemText (sitem, 1, "-");
                        symbollist.setItemText (sitem, 2, "-");
                        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, symbol, "5");
                    }
                } else {
                    XTMessageBox.MessageBoxYesNo (this,
                                                  "注意",
                                                  "此品种已订阅",
                                                  "好",
                                                  nilptr,
                                                  nilptr,
                                                  nilptr,
                                                  0,
                                                  false);
                }
            }
        }
    }

    protected void on_pushButton_5_Click (QObject obj, bool checked) override {
        XTMessageBox.MessageBoxYesNo (this,
                                      "注意",
                                      "功能未开放",
                                      "好",
                                      nilptr,
                                      nilptr,
                                      nilptr,
                                      0,
                                      false);
    }

    void resetAllAction (QObject excp) {
        String [] actions = {
            "action1_min", "action2_Min", "action3_M", "action4_M", "action5_M", "action6_M",
            "action10_M", "action12_M", "action15_Min", "action20_Min", "action30_Min", "action1_Hour",
            "action2_Hours", "action3_Hour3", "action4_Hours", "action6_Hours", "action8_Hours",
            "action12_Hours", "action1_Day", "action1_Week", "action1_Month"
        };

        for (String s : actions) {
            QAction action = findByName (s);

            if (action != nilptr && action != excp) {
                action.setChecked (false);
            }
        }

        ( (QAction) excp).setChecked (true);
    }

    protected void on_action1_min_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "1");
    }

    public void Reconfig() {
        trading.setTheme (Setting.isDarkTheme() );
        themeLogcat();
    }

    protected void on_action2_Min_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "2");
    }

    public static void OutputLogcat (String text) {
        _instance.runOnUi (new Runnable() {
            void run() override {
                bool tobottom = _instance._logcat.getCurrentPosition() == _instance._logcat.getLength();
                _instance._logcat.appendText ( "\n" + String.formatDate ("[%Y-%m-%d %H:%M:%S]: ", _system_.currentTimeMillis() ) + "" + text);
                if (tobottom){
                    _instance._logcat.gotoPos(_instance._logcat.getLength());
                }
            }
        });
    }

    protected void on_action3_M_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "3");
    }



    protected void on_action4_M_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "4");
    }



    protected void on_action5_M_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "5");
    }



    protected void on_action6_M_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "6");
    }



    protected void on_action10_M_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "10");
    }



    protected void on_action12_M_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "12");
    }



    protected void on_action15_Min_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "15");
    }



    protected void on_action20_Min_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "20");
    }



    protected void on_action30_Min_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "30");
    }



    protected void on_action1_Hour_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "16385");
    }



    protected void on_action2_Hours_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "16386");
    }



    protected void on_action3_Hour3_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "16387");
    }



    protected void on_action4_Hours_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "16388");
    }



    protected void on_action6_Hours_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "16390");
    }



    protected void on_action8_Hours_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "16392");
    }



    protected void on_action12_Hours_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "16396");
    }



    protected void on_action1_Day_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "16408");
    }



    protected void on_action1_Week_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "32769");
    }



    protected void on_action1_Month_Trigger (QObject obj) override {
        if (trading.currentData() == nilptr) {
            return;
        }

        resetAllAction (obj);
        trading.currentData().showWait(true, "加载中...");
        m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, trading.getSymbol(), "49153");
    }



    protected void on_actionaddhline_Trigger (QObject obj) override {
        trading.beginDraw (OBJECT_TYPE.OBJECT_HLINE);

    }



    protected void on_actionaddfb_Trigger (QObject obj) override {
        trading.beginDraw (OBJECT_TYPE.OBJECT_FB);
    }



    protected void on_actiontrandline_Trigger (QObject obj) override {
        trading.beginDraw (OBJECT_TYPE.OBJECT_TRENDLINE);

    }



    protected void on_actionXABCD_Trigger (QObject obj) override {
        trading.beginDraw (OBJECT_TYPE.OBJECT_XABCD);

    }

    protected void on_pushButton_Click (QObject obj, bool checked) override {
        String symbol = cmbSym.getCurrentText(), sDir = cmbDir.getCurrentText(), sProfit = cmbProfit.getCurrentText();

        if (symbol == "仅勾选的") {
            long [] items = poslist.getTopItems();

            for (long h : items) {
                if (poslist.isItemCheck (h, 0) == false) {
                    continue;
                }

                String tick = poslist.getItemText (h, 0);

                if (TextUtils.isEmpty (tick) == false) {

                    Position p = nilptr;

                    synchronized (positions) {
                        p = positions.get (tick);
                    }

                    if (p != nilptr) {
                        if ( (p.posType == ORDER_TYPE.ORDER_TYPE_BUY && sDir == "多单") || (p.posType == ORDER_TYPE.ORDER_TYPE_SELL && sDir == "空单") || sDir == "全部") {
                            if ( (p.profit > 0 && sProfit == "盈利") || (p.profit < 0 && sProfit == "亏损") || sProfit == "全部") {
                                m5p.getExecuter().close (nilptr, CMD_ORDER_CLOSE, 0, p.id);
                            }
                        }
                    }
                }
            }
        } else {
            synchronized (positions) {
                for (var iter = positions.iterator(); iter.hasNext(); iter.next() ) {
                    Position p = iter.getValue();

                    if (p.symbol == symbol || symbol == "全部") {
                        if ( (p.posType == ORDER_TYPE.ORDER_TYPE_BUY && sDir == "多单") || (p.posType == ORDER_TYPE.ORDER_TYPE_SELL && sDir == "空单") || sDir == "全部") {
                            if ( (p.profit > 0 && sProfit == "盈利") || (p.profit < 0 && sProfit == "亏损") || sProfit == "全部") {
                                m5p.getExecuter().close (nilptr, CMD_ORDER_CLOSE, 0, p.id);
                            }
                        }
                    }
                }
            }
        }
    }



    protected void on_actionsetup_Trigger (QObject obj) override {
        SystemSetting.showSetting();
    }




    public void on_symbollist_ItemDoubleClicked (QTreeWidget, long item, int column) override {
        if (item == 0) {
            return;
        }

        var iter = subscribelist.iterator();

        while (iter.hasNext() ) {
            if (iter.getValue().handler == item) {
                bool needWait = false;
                if (iter.getValue().size() < 300) {
                    needWait = true;
                    //m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, iter.getKey(), "5");
                }

                int modifiers = QApplication.keyboardModifiers();

                if ( (modifiers & Constant.ControlModifier) == Constant.ControlModifier) {
                    TradingView tv = new TradingView();

                    if (tv.create() ) {
                        tv.onInit();
                        tv.setup (iter.getValue() );
                        tv.setAllowAlone (false);
                        tv.showWait(needWait, "加载中...");
                        tv.show();
                    }
                } else if (trading.getCurrentSymbol() != iter.getKey() ) {
                    trading.showWait(needWait, "加载中...");
                    trading.reset();
                    trading.setup (iter.getValue() );
                }
                
                if (needWait) {
                    m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, iter.getKey(), "5");
                }

                break;
            }

            iter.next();
        }
    }




    public void on_poslist_ItemDoubleClicked (QTreeWidget w, long item, int column) override {
        if (item == 0) {
            return;
        }

        String tick = w.getItemText (item, 0);
        String symbol = w.getItemText (item, 1);
        String sprice = w.getItemText (item, 4);
        var data = subscribelist.get (symbol);

        if (data != nilptr) {
            bool needWait = false;
            if (data.size() < 300) {
                needWait = true;
            }

            OrderObject.__currentObject = data.getPosition (tick);
            int modifiers = QApplication.keyboardModifiers();

            if ( (modifiers & Constant.ControlModifier) == Constant.ControlModifier) {
                TradingView tv = new TradingView();

                if (tv.create() ) {
                    tv.onInit();
                    tv.setup (data);
                    tv.setAllowAlone (false);
                    tv.showWait(needWait, "加载中...");
                    tv.show();
                }
            } else {
                if (trading.getCurrentSymbol() != symbol) {
                    trading.reset();
                    trading.setup (data);
                    trading.showWait(needWait, "加载中...");
                }

                trading.gotoPrice (sprice.parseFloat() );
            }
            
            if (needWait) {
                m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, symbol, "5");
            }
        }
    }




    public bool on_this_Close (QObject obj) override {
        m5p.setQuit();
        int [] ss = contentWidget.sizes();
        Preference.setSetting("d_rw", ss[1]);
        ss = horizontalSplitter.sizes();
        Preference.setSetting("d_bw", ss[1]);
        return true;
    }




    public void on_orderlist_ItemDoubleClicked (QTreeWidget w, long item, int column) override {
        if (item == 0) {
            return;
        }

        String tick = w.getItemText (item, 0);
        String symbol = w.getItemText (item, 1);
        String sprice = w.getItemText (item, 4);
        var data = subscribelist.get (symbol);

        if (data != nilptr) {
            bool needWait = false;
            if (data.size() < 300) {
                needWait = true;
            }

            OrderObject.__currentObject = data.getOrder (tick);
            int modifiers = QApplication.keyboardModifiers();

            if ( (modifiers & Constant.ControlModifier) == Constant.ControlModifier) {
                TradingView tv = new TradingView();

                if (tv.create() ) {
                    tv.onInit();
                    tv.setup (data);
                    tv.setAllowAlone (false);
                    tv.showWait(needWait, "加载中...");
                    tv.show();
                }
            } else {
                if (trading.getCurrentSymbol() != symbol) {
                    trading.reset();
                    trading.setup (data);
                    trading.showWait(needWait, "加载中...");
                }

                trading.gotoPrice (sprice.parseFloat() );
            }
            
            if (needWait) {
                m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, symbol, "5");
            }
        }
    }



    protected void on_actionalarm_Trigger (QObject obj) override {
        trading.beginDraw (OBJECT_TYPE.OBJECT_ALARM);

    }



    protected void on_actionkbar_Trigger (QObject obj) override {
        trading.setKMode (DrawMode.NORMAL_K);

    }



    protected void on_actiontrendk_Trigger (QObject obj) override {
        trading.setKMode (DrawMode.TREND_K);

    }



    protected void on_actionusak_Trigger (QObject obj) override {
        trading.setKMode (DrawMode.USA_K);

    }



    protected void on_actionarrowl_Trigger (QObject obj) override {
        trading.beginDraw (OBJECT_TYPE.OBJECT_ARRAWLEFT);

    }



    protected void on_actionarrowr_Trigger (QObject obj) override {
        trading.beginDraw (OBJECT_TYPE.OBJECT_ARRAWRIGHT);

    }



    protected void on_actionarrowt_Trigger (QObject obj) override {
        trading.beginDraw (OBJECT_TYPE.OBJECT_ARRAWUP);

    }



    protected void on_actionarrowb_Trigger (QObject obj) override {
        trading.beginDraw (OBJECT_TYPE.OBJECT_ARRAWDOWN);

    }





    // "订单号",  "品种", "开仓时间", "类型", "开仓价格", "保证金", "止损", "止盈", "交易量", "平仓价", "平仓时间", "盈亏", "备注"
    public void on_hispos_ItemDoubleClicked (QTreeWidget w, long item, int column) override {
        if (item == 0) {
            return;
        }

        String posid = w.getItemText (item, 0);
        Position p = nilptr;
        synchronized (hislist) {
            p = hislist.get (posid);
        }
        var data = subscribelist.get (p.symbol);

        if (p != nilptr && data != nilptr) {
            bool needWait = false;
            if (data.size() < 300) {
                needWait = true;
            }

            int modifiers = QApplication.keyboardModifiers();

            if ( (modifiers & Constant.ControlModifier) == Constant.ControlModifier) {
                TradingView tv = new TradingView();

                if (tv.create() ) {
                    tv.onInit();
                    tv.setup (data);
                    tv.setAllowAlone (false);
                    tv.showWait(needWait, "加载中...");
                    tv.show();
                    tv.indicate (p);
                }
            } else {
                if (trading.getCurrentSymbol() != p.symbol) {
                    trading.reset();
                    trading.showWait(needWait, "加载中...");
                    trading.setup (data);
                }

                trading.indicate (p);
            }
            
            if (needWait) {
                m5p.getExecuter().query (nilptr, TradingData.CMD_BARS, p.symbol, "5");
            }
        }
    }

    public void updateActions() {
        static String [] actionStr = {
            "action1_min",
            "action2_Min",
            "action3_M",
            "action4_M",
            "action5_M",
            "action6_M",
            "action10_M",
            "action12_M",
            "action15_Min",
            "action20_Min",
            "action30_Min",
            "action1_Hour",
            "action2_Hours",
            "action3_Hour3",
            "action4_Hours",
            "action6_Hours",
            "action8_Hours",
            "action12_Hours",
            "action1_Day",
            "action1_Week",
            "action1_Month"
        };

        static const ENUM_TIMEFRAMES [] preenums = {ENUM_TIMEFRAMES.PERIOD_M1,
                                                    ENUM_TIMEFRAMES.PERIOD_M2,
                                                    ENUM_TIMEFRAMES.PERIOD_M3,
                                                    ENUM_TIMEFRAMES.PERIOD_M4,
                                                    ENUM_TIMEFRAMES.PERIOD_M5,
                                                    ENUM_TIMEFRAMES.PERIOD_M6,
                                                    ENUM_TIMEFRAMES.PERIOD_M10,
                                                    ENUM_TIMEFRAMES.PERIOD_M12,
                                                    ENUM_TIMEFRAMES.PERIOD_M15,
                                                    ENUM_TIMEFRAMES.PERIOD_M20,
                                                    ENUM_TIMEFRAMES.PERIOD_M30,
                                                    ENUM_TIMEFRAMES.PERIOD_H1,
                                                    ENUM_TIMEFRAMES.PERIOD_H2,
                                                    ENUM_TIMEFRAMES.PERIOD_H3,
                                                    ENUM_TIMEFRAMES.PERIOD_H4,
                                                    ENUM_TIMEFRAMES.PERIOD_H6,
                                                    ENUM_TIMEFRAMES.PERIOD_H8,
                                                    ENUM_TIMEFRAMES.PERIOD_H12,
                                                    ENUM_TIMEFRAMES.PERIOD_D1,
                                                    ENUM_TIMEFRAMES.PERIOD_W1,
                                                    ENUM_TIMEFRAMES.PERIOD_MN1
                                                   };
        TradingData data = trading.currentData();

        if (data != nilptr) {
            ENUM_TIMEFRAMES p = data.currentPeriod();

            for (int i = 0; i < actionStr.length; i++) {
                QAction qa = findByName (actionStr[i]);

                if (qa != nilptr) {
                    qa.setChecked (p == preenums[i]);
                }
            }
        } else {
            for (int i = 0; i < actionStr.length; i++) {
                QAction qa = findByName (actionStr[i]);

                if (qa != nilptr) {
                    qa.setChecked (false);
                }
            }
        }

    }

    public static void UpdateActions() {
        if (_instance != nilptr) {
            _instance.updateActions();
        }
    }

    protected void on_pushButton_2_Click (QObject obj, bool checked) override {
        String file = QFileDialog.getOpenFileName ("加载EA", "", "*.slx", this);

        if (TextUtils.isEmpty (file) == false) {
            _system_.loadLibrary (file);
        }
    }



    protected void on_actionandrew_Trigger (QObject obj) override {
        trading.beginDraw (OBJECT_TYPE.OBJECT_ANDREW);
    }



    protected void on_actionaddfbt_Trigger (QObject obj) override {
        trading.beginDraw (OBJECT_TYPE.OBJECT_CHANNEL);
    }

    static JsonObject getECEvents (String year, String month, String day) {
        HttpRequest req = new HttpRequest();

        if (req.get ("http://1.94.142.44:1808/eco.xsp?year=" + year + "&month=" + month + "&day="  + day, 300000, false) ) {
            int ava = 0;

            try {
                byte [] data = new byte [1024];
                String finalbuf = "";

                while ( (ava = req.available (true) ) > 0) {
                    ava = req.read (data, 0, 1024);
                    finalbuf = finalbuf + new String (data, 0, ava);
                }

                return new JsonObject (finalbuf);
            } catch (Exception e) {

            }
        }

        return nilptr;
    }
    
    static JsonObject getKST () {
        HttpRequest req = new HttpRequest();

        if (req.get ("http://1.94.142.44:1808/kst.xsp", 300000, false) ) {
            int ava = 0;

            try {
                byte [] data = new byte [1024];
                String finalbuf = "";

                while ( (ava = req.available (true) ) > 0) {
                    ava = req.read (data, 0, 1024);
                    finalbuf = finalbuf + new String (data, 0, ava);
                }

                return new JsonObject (finalbuf);
            } catch (Exception e) {

            }
        }

        return nilptr;
    }

    String getInfName (int n) {
        if (n == 0) {
            return "低";
        }

        if (n == 1) {
            return "中等";
        }

        if (n == 2) {
            return "高";
        }

        return "一般";
    }

    String getInfIcon (int n) {
        if (n == 0) {
            return AssetsManager.getResource ("res/toolbar/inf0.png");
        }

        if (n == 1) {
            return AssetsManager.getResource ("res/toolbar/inf1.png");
        }

        if (n == 2) {
            return AssetsManager.getResource ("res/toolbar/inf2.png");
        }

        return AssetsManager.getResource ("res/toolbar/infx.png");
    }
    
    String getKSIcon (int n) {
        if (n == 1) {
            return AssetsManager.getResource ("res/toolbar/rb.png");
        }

        if (n == 2) {
            return AssetsManager.getResource ("res/toolbar/rp.png");
        }

        if (n == 3) {
            return AssetsManager.getResource ("res/toolbar/cb.png");
        }
        
        if (n == 4) {
            return AssetsManager.getResource ("res/toolbar/cp.png");
        }
        return AssetsManager.getResource ("res/toolbar/wait.png");
    }
    
    JsonObject lastEcoobjects = nilptr;
    Thread ecoThread = nilptr;
    
    void updateECO() {
        //"时间", "事件", "货币", "影响力", "预测值", "今值", "前值", "说明"
        synchronized (this) {
            
        	if (ecoThread == nilptr){
                pushButton_3.setEnabled(false);
                long timestamp = dateTimeEdit_3.getDateTime();
                String year = String.formatDate ("%Y", timestamp);
                String month = String.formatDate ("%m", timestamp);
                String day = String.formatDate ("%d", timestamp);
                eclist.clear();
                ecstate.setText ("数据加载中...");
                ecoThread = new Thread() {
                    void run() override {
                        JsonObject objects = getECEvents (year, month, day);

                        runOnUi (new Runnable() {
                            void run() override{
                                if (objects != nilptr){
                                    lastEcoobjects = nilptr;
                                }
                                loadEcos(objects) ;
                                synchronized (Dialog.this) {
                                    ecoThread = nilptr;
                                    pushButton_3.setEnabled(true);
                                }
                            }
                        });
                    }
                } ;
                ecoThread.start();
            }
        }
    }
    
    
    Thread kstThread = nilptr;
    
    void updateKST() {
        //"时间", "事件", "货币", "影响力", "预测值", "今值", "前值", "说明"
        synchronized (this) {
            
        	if (kstThread == nilptr){
                pushButton_6.setEnabled(false);
                kstree.clear();
                label_10.setText ("数据加载中...");
                kstThread = new Thread() {
                    void run() override {
                        JsonObject objects = getKST ();

                        runOnUi (new Runnable() {
                            void run() override{
                                loadKst(objects) ;
                                synchronized (Dialog.this) {
                                    kstThread = nilptr;
                                    pushButton_6.setEnabled(true);
                                }
                            }
                        });
                    }
                } ;
                kstThread.start();
            }
        }
    }

    public void loadEcos(JsonObject objects) {
        
        if (objects == nilptr) {
            ecstate.setText ("加载失败, 请稍后刷新重试...");
        } else {
            eclist.clear();
            JsonArray items = objects.getArray ("data");
            int curLev = cmbInflev.getCurrentIndex();
            if (items != nilptr && items.length() > 0) {
                
                int filecnt = 0;
                bool bHighEco = false;
                for (int i : items.length()) {
                    JsonObject item = items.getObject (i);

                    if (item != nilptr) {
                        int ninf = item.getInt ("inf");
                        if (ninf == 2){
                            bHighEco = true;
                        }
                        if ((curLev - 1) <= ninf){
                            filecnt++;
                            eclist.addItem (getInfIcon (ninf), new String[] {
                                                item.getString ("time"),
                                                item.getString ("event"),
                                                item.getString ("cury"),
                                                getInfName (ninf),
                                                item.getString ("prereport"),
                                                item.getString ("now"),
                                                item.getString ("pre"),
                                                item.getString ("desccr")
                                            });
                        }
                    }
                }
                ecstate.setText ("" + filecnt + "个事件, 数据更新时间:" + String.formatDate("%Y年%m月%d日 %H:%M:%S", objects.getLong("updatetime")));
                if (lastEcoobjects == nilptr){
                    lastEcoobjects = objects;
                }
                if (!bEcoTip && bHighEco){
                    XTMessageBox.MessageBoxYesNo (Dialog.this,
                                                      "注意",
                                                      "今天有高影响力经济事件, 注意查阅经济日历!",
                                                      "好",
                                                      nilptr,
                                                      nilptr,
                                                      nilptr,
                                                      0,
                                                      false);
                    bEcoTip = true;
                }
            } else {
                ecstate.setText ("无事件");
            }
        }
    }
    
    String getKSTName(int n){
        static const String [] ksname = {
            "--",
            "转为下跌",
            "转为上涨",
            "持续下跌",
            "持续上涨"
        };
        
        try{
        	return ksname[n];
        }catch(Exception e){
        	
        }
        return "-";
    }
    
    String getStateStable(int n){
        static const String [] ksname = {
            "低",
            "中等",
            "高"
        };
        
        try{
        	return ksname[n];
        }catch(Exception e){
        	
        }
        return "-";
    }
    
    public void loadKst(JsonObject objects) {
        
        if (objects == nilptr) {
            label_10.setText ("加载失败, 请稍后刷新重试...");
        } else {
            kstree.clear();
            JsonArray items = objects.getArray ("data");

            if (items != nilptr && items.length() > 0) {
                
                for (int i : items.length()) {
                    JsonObject item = items.getObject (i);
                    if (item != nilptr) {
                        //kstree.setColumns (new String[]{"品种",  "形态", "周期", "可靠度"});
                        int kst = item.getInt("state");
                        kstree.addItem (getKSIcon (kst), new String[] {
                                            item.getString ("symbol"),
                                            getKSTName (kst),
                                            item.getString ("period"),
                                            getStateStable(item.getInt ("level"))
                                        });
                        
                    }
                }
                label_10.setText ("更新于" + String.formatDate("%Y年%m月%d日 %H:%M", objects.getLong("updatetime")));
            } else {
                label_10.setText ("无数据");
            }
        }
    }

    public void on_cmbInflev_ItemSelected (QObject obj, int id) override {
        loadEcos(lastEcoobjects);
    }


    
	protected void on_pushButton_3_Click(QObject obj, bool checked)override{
        updateECO();
	}
	
	
	
	
	public void on_eclist_ItemDoubleClicked(QTreeWidget tree,long item, int column)override {
        if (item == 0){
            return;
        }
        String text = tree.getItemText(item, 1) + "\n\n" + 
        "级别:" + tree.getItemText(item, 3) + "\n\n" + 
        "时间:" + tree.getItemText(item, 0) + "\n\n" + 
        "货币:" + tree.getItemText(item, 2) + "\n\n" + 
        "说明:" + tree.getItemText(item, 7);
        AlertDialog.showInformation("经济日历", text, 16, 400, 400, "好", nilptr);
	}
	
    void scanEco(){
        int mode = Setting.getECOAlert();
        if (mode == 0){
            return;
        }
        mode -= 2;
        JsonObject ecos = lastEcoobjects;
        if (ecos != nilptr){
            JsonArray items = ecos.getArray ("data");
            if (items != nilptr && items.length() > 0) {
                long currentTime = /*"2025-08-15 19:30".parseDate("%Y-%m-%d %H:%M", 0);//*/_system_.currentTimeMillis();
                bool bSounded = false;
                for (int i : items.length()) {
                    JsonObject item = items.getObject (i);
                    if (item != nilptr) {
                        String time = item.getString ("time");
                        String event = item.getString ("event");
                        int ninf = item.getInt ("inf");
                        if (mode <= ninf){
                            long dstTime = time.parseDate("%Y-%m-%d %H:%M", 0);
                            if (currentTime + 3600000 >= dstTime && currentTime + 3570000 < dstTime){ // 1小时
                                if (!bSounded){
                                    SoundMgr.ecoCaution();
                                    bSounded = true;
                                    QApplication.Alert(this, 5000);
                                }
                                Dialog.OutputLogcat("Caution 注意:" + getInfName (ninf) + "影响力事件[" + event + "],将在1小时后 (" + time + ") 发生.");
                            }else
                            if (currentTime + 1800000 >= dstTime && currentTime + 1770000 < dstTime){ // 半小时
                                if (!bSounded){
                                    SoundMgr.ecoCaution();
                                    bSounded = true;
                                    QApplication.Alert(this, 5000);
                                }
                                Dialog.OutputLogcat("Caution 注意:" + getInfName (ninf) + "影响力事件[" + event + "],将在30分钟后 (" + time + ") 发生.");
                            }else
                            if (currentTime + 900000 >= dstTime && currentTime + 870000 < dstTime){ // 15分钟
                                if (!bSounded){
                                    SoundMgr.ecoCaution();
                                    bSounded = true;
                                    QApplication.Alert(this, 5000);
                                }
                                Dialog.OutputLogcat("Caution 注意:" + getInfName (ninf) + "影响力事件[" + event + "],将在15分钟后 (" + time + ") 发生.");
                            }else
                            if (currentTime + 300000 >= dstTime && currentTime + 270000 < dstTime){ // 5分钟
                                if (!bSounded){
                                    SoundMgr.ecoCaution();
                                    bSounded = true;
                                    QApplication.Alert(this, 5000);
                                }
                                Dialog.OutputLogcat("Caution 注意:" + getInfName (ninf) + "影响力事件[" + event + "],将在5分钟后 (" + time + ") 发生.");
                            }else
                            if (currentTime + 120000 >= dstTime && currentTime + 90000 < dstTime){ // 5分钟
                                if (!bSounded){
                                    SoundMgr.ecoCaution();
                                    bSounded = true;
                                    QApplication.Alert(this, 5000);
                                }
                                Dialog.OutputLogcat("Caution 注意:" + getInfName (ninf) + "影响力事件[" + event + "],将在2分钟后 (" + time + ") 发生.");
                            }else
                            if (currentTime + 30000 >= dstTime && currentTime < dstTime){ // 5分钟
                                if (!bSounded){
                                    SoundMgr.ecoCaution();
                                    bSounded = true;
                                    QApplication.Alert(this, 5000);
                                }
                                Dialog.OutputLogcat("Caution 注意:" + getInfName (ninf) + "影响力事件[" + event + "],即将发生 (" + time + ") .");
                            }
                        }
                    }
                }
            }
        }
    }
	
	
	protected void on_pushButton_6_Click(QObject obj, bool checked)override{
		updateKST();
	}
	
	
	
	protected void on_actiontriangle_Trigger(QObject obj)override{
		trading.beginDraw (OBJECT_TYPE.OBJECT_TRIANGLE);
	}
	
	
	
	protected void on_actionaddvline_Trigger(QObject obj)override{
		trading.beginDraw (OBJECT_TYPE.OBJECT_VLINE);
	
	}
	
	
	
	protected void on_actiontext_Trigger(QObject obj)override{
		trading.beginDraw (OBJECT_TYPE.OBJECT_TEXT);
	
	}
	
	
	
	protected void on_actionlineto_Trigger(QObject obj)override{
		trading.beginDraw (OBJECT_TYPE.OBJECT_LINTETO);
	
	}
	
	
	
	protected void on_actionWebver_Trigger(QObject obj)override{
		QApplication.openUrl("http://xtrader.uri.plus");
	}
	
	
	
	protected void on_actiondocument_Trigger(QObject obj)override{
        QApplication.openUrl("http://xtrader.uri.plus/documentation.html");
	}
    
    
     public static String getAppVersion() {
        long vv = _system_.getAppVersion();
        String vs = "v";

        for (int i = 0; i < 4; i ++) {
            vs = vs + ( (vv >> ( (4 - (i + 1) ) << 4) ) & 0xffff);

            if (i != 3) {
                vs = vs + ".";
            }
        }

        return vs;
    }
	
	
	protected void on_actionabout_Trigger(QObject obj)override{
        String buildtime = String.formatDate("%Y年%m月%d日", _system_.getAppTimestamp());
		this.About("XTrader", "<Strong>XTrader Release " + getAppVersion() + " </Strong><br /><br />" +
                                         "构建日期: " + buildtime + "<br /><br />" +
                                         "<b>该软件使用xlang " + __x_ver__ + " 开发, 软件全部源代码未来可在github上开放.<br />" +
                                         "<br /><br />  本系统完全免费(阶段性完善之后会开源),绘图工具仅有列举出来的种类，指标目前仅有SMA/EMA，后续会增加，策略、回测功能目前在测试阶段暂不可用，系统中可能会有趋势行情提醒，但不构成任何投资建议，请自行斟酌，" + 
                                         "<br /><br />  本系统仅为参考学习之用，不保证关于投资建议的任何参考信息准确可靠，严禁用于商业用途，作者对此造成的任何损失或者投资失利不承担任何责任。.\n" + 
                                         "<br /><br />  本系统扩展程序为MT4/MT5提供的合法EA交易接口进行对接，不对MT4/MT5程序本身进行任何修改，不影响原本功能, 不污染系统，如需要卸载扩展，仅需删除安装的扩展程序即可。.<br /><br />" +
                                         "<em>需要注意该软件底层使用了第三方图形库Qt (Copyright The Qt Company Ltd), 二次发布和使用须遵守第三方授权协议.</em><br /><br />" +
                                         "github项目首页:<a href=\"https://ixlang.github.io/\">https://ixlang.github.io/</a><br />" +
                                         "<p align=\"right\">QQ: 233276111</p>" +
                                         "<p align=\"right\">Cadaquz 2025-08-24</p>");
	
	}
	
	
	/*** EndOfClass ***/
};
